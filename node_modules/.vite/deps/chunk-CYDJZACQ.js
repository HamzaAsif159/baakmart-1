import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  useClassNamesOverride,
  useControlled,
  useId,
  useSlotProps
} from "./chunk-AP3YOCT3.js";
import {
  _extends,
  _objectWithoutPropertiesLoose
} from "./chunk-FRTRIHKC.js";
import {
  require_prop_types
} from "./chunk-JTQO2DUY.js";
import {
  require_jsx_runtime
} from "./chunk-XNQGYQRN.js";
import {
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/@mui/base/TabsUnstyled/TabsUnstyled.js
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/base/TabsUnstyled/tabsUnstyledClasses.js
function getTabsUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiTabs", slot);
}
var tabsUnstyledClasses = generateUtilityClasses("MuiTabs", ["root", "horizontal", "vertical"]);
var tabsUnstyledClasses_default = tabsUnstyledClasses;

// node_modules/@mui/base/useTabs/useTabs.js
var React = __toESM(require_react());
function useTabs(parameters) {
  const {
    value: valueProp,
    defaultValue,
    onChange,
    orientation,
    direction,
    selectionFollowsFocus
  } = parameters;
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Tabs",
    state: "value"
  });
  const idPrefix = useId();
  const onSelected = React.useCallback((e, newValue) => {
    setValue(newValue);
    if (onChange) {
      onChange(e, newValue);
    }
  }, [onChange, setValue]);
  const tabsContextValue = React.useMemo(() => {
    return {
      idPrefix,
      value,
      onSelected,
      orientation,
      direction,
      selectionFollowsFocus
    };
  }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
  return {
    tabsContextValue
  };
}
var useTabs_default = useTabs;

// node_modules/@mui/base/TabsUnstyled/TabsContext.js
var React2 = __toESM(require_react());
var Context = React2.createContext(null);
if (true) {
  Context.displayName = "TabsContext";
}
function useTabContext() {
  return React2.useContext(Context);
}
function getPanelId(context, value) {
  const {
    idPrefix
  } = context;
  if (idPrefix === null) {
    return null;
  }
  return `${context.idPrefix}-P-${value}`;
}
function getTabId(context, value) {
  const {
    idPrefix
  } = context;
  if (idPrefix === null) {
    return null;
  }
  return `${context.idPrefix}-T-${value}`;
}
var TabsContext_default = Context;

// node_modules/@mui/base/TabsUnstyled/TabsUnstyled.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
var useUtilityClasses = (ownerState) => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation]
  };
  return composeClasses(slots, useClassNamesOverride(getTabsUnstyledUtilityClass));
};
var TabsUnstyled = React3.forwardRef((props, ref) => {
  var _ref;
  const {
    children,
    orientation = "horizontal",
    direction = "ltr",
    component,
    slotProps = {},
    slots = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    tabsContextValue
  } = useTabs_default(props);
  const ownerState = _extends({}, props, {
    orientation,
    direction
  });
  const classes = useUtilityClasses(ownerState);
  const TabsRoot = (_ref = component != null ? component : slots.root) != null ? _ref : "div";
  const tabsRootProps = useSlotProps({
    elementType: TabsRoot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime.jsx)(TabsRoot, _extends({}, tabsRootProps, {
    children: (0, import_jsx_runtime.jsx)(TabsContext_default.Provider, {
      value: tabsContextValue,
      children
    })
  }));
});
true ? TabsUnstyled.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types.default.oneOfType([import_prop_types.default.oneOf([false]), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types.default.oneOf(["ltr", "rtl"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: import_prop_types.default.bool,
  /**
   * The props used for each slot inside the Tabs.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside the Tabs.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `false`.
   */
  value: import_prop_types.default.oneOfType([import_prop_types.default.oneOf([false]), import_prop_types.default.number, import_prop_types.default.string])
} : void 0;
var TabsUnstyled_default = TabsUnstyled;

export {
  getTabsUnstyledUtilityClass,
  tabsUnstyledClasses_default,
  useTabContext,
  getPanelId,
  getTabId,
  TabsContext_default,
  TabsUnstyled_default
};
//# sourceMappingURL=chunk-CYDJZACQ.js.map
